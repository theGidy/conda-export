#!/bin/bash



# Default Values
export_path=$HOME
exclude="base"
verbose=0
help=0
conda_arguments=""

function help() { 
	echo """
conda-export - 1.0 - 04.05.2021

usage: conda-export [arguments]        export environment

Arguments:
   -d                   Destination of the environment.yml files {default $HOME)
   -i                   Comma seperated include list of environments
   -e                   Comma seperated exclude list of environments (default base)
   -f                   Export environment with explicit version numbers, otherwise only manual installed packages
   -v			Verbose 
   -h                   Print this dialog

Conda export Arguments: 
 
   -n         		Remove build specification from dependencies [conda export --no-builds ]
   -c			Do not include channel names with package names. [conda export --ignore-channels ]
   -f		        Build environment spec from explicit specs in history [conda export --from-history ]

Example:
   conda-export -e env1,env2 -d ~ 
"""
	exit 0
}

function print(){	
	if [ "${verbose}" -eq 1 ]
	then
	        echo $1
	fi


}

while getopts d:i:e:fhvcnof flag
do
    case "${flag}" in
        d) export_path=${OPTARG};;
	i) include=${OPTARG};;
	e) exclude=${OPTARG};;
	f) conda_arguments=$conda_arguments" --from-history";;
	c) conda_arguments=$conda_arguments" --ignore-channels";;
	n) conda_arguments=$conda_arguments" --no-builds";;
	h) help=1;;
	v) verbose=1;
    esac
done

if [ "${help}" -eq 1 ] 
then
	help
fi

IFS=',' read -ra exclude_array <<< "$exclude"

print "Will serach for existing environments..."
all_environments=$(eval "conda env list | cut -d ' ' -f1|tail -n +4")

print "Installed environments: $all_environments"
if [ ! -z "${include+x}" ]
then
	IFS=',' read -ra include_array <<< "$include"
else
	include_array=$all_environments
fi



print "Exclude environments: ${exclude_array[*]}"
print "Include environments: ${include_array[*]}"

for env in ${exclude_array[@]}; do
	env_array=( "${include_array[@]/$env}" )
done

print "Export environments: ${env_array[*]}"

for env_name in ${env_array[@]} 
do
	if [ "$env_name" != "#" ]
	then
		 destination="$(realpath ${export_path})/${env_name}.yml"
		 print "Export $env_name to ${destination}"
		 command="conda env export -n $env_name $conda_arguments > $destination"
		 eval $command
	fi
done

print "FINISHED"
exit 0
